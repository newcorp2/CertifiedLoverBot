plugins {
    id "java"
    id "idea"
    id "edu.wpi.first.GradleRIO" version "2022.3.1"
}


group 'com.team2073'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenLocal()
    mavenCentral()
}

def COMMON_VERSION = '0.5.0-SNAPSHOT'
def ROBOT_MAIN_CLASS = "com.team2073.robot.Main"

// Pass arguments via command line to active different modes
// Ex: ./gradlew deploy -Psim
// Sets simulation mode using the simulation robot class defined below
// Ex: ./gradlew deploy -PtestBoard
// Sets simulation mode using the test board robot class defined below

// Property keys
def PROP_KEY_REMOTE_DEBUG_MODE = "remoteDebug"
def PROP_KEY_TEAM_NUMBER = "teamNumber"

// Configurale properties
def TEAM_NUMBER = 2073
def DEBUG_MODE = false
def IP_ADDRESS
def includeDesktopSupport = true

println "Team 2073 custom arguments available:"
println "\t-P" + PROP_KEY_REMOTE_DEBUG_MODE
println "\t-P" + PROP_KEY_TEAM_NUMBER + "=####"

ext {

    if (project.hasProperty(PROP_KEY_REMOTE_DEBUG_MODE)) {
        println "Remote debug mode enabled"
        DEBUG_MODE = true
    }

    if (project.hasProperty(PROP_KEY_TEAM_NUMBER)) {
        println "============================================================================"
        println "Overriding default team # of [" + TEAM_NUMBER + "] with [" + teamNumber + "]."
        println "============================================================================"
        TEAM_NUMBER = teamNumber.toInteger()
    }

    IP_ADDRESS = "10." + TEAM_NUMBER.toString().substring(0, 2) + "." + TEAM_NUMBER.toString().substring(2, 4) + ".2"
    println "Setting IP address to: " + IP_ADDRESS
}

deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = TEAM_NUMBER
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    // In Java for now, the argument must be false
//    simulation wpi.java.deps.sim.gui(wpi.platforms.desktop, false)
//    compile group: 'org.json', name: 'json', version: '20180813'
    implementation group: 'org.json', name: 'json', version: '20210307'
    implementation group: 'com.team2073', name: 'common-util', version: COMMON_VERSION
    implementation group: 'com.team2073', name: 'common-wpi-util', version: COMMON_VERSION
    implementation group: 'com.team2073', name: 'common-guice', version: COMMON_VERSION
    implementation group: 'com.opencsv', name: 'opencsv', version: '5.0'
    testImplementation group: 'com.team2073', name: 'common-wpi-simulation', version: COMMON_VERSION
    testImplementation group: 'com.team2073', name: 'common-wpi-simulation-stubs', version: COMMON_VERSION

    testImplementation 'junit:junit:4.13.2'


}



wrapper {
    gradleVersion = "7.3.3"
}

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)
